# common
import unittest
import tkinter as tk
import random
import zipfile
import os

# Manga Tagger
from MangaManager.MangaTaggerLib.MangaTagger import MangataggerApp
from MangaManager.MangaTaggerLib.cbz_handler import *

# Cover Manager
from MangaManager.CoverManagerLib.cbz_handler import SetCover
from MangaManager.CoverManagerLib.models import cover_process_item_info

comicinfo_23 = """
<ComicInfo xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <!--Generated by Manga Tagger, an Endless Galaxy Studios project-->
   <Series>Maou ni Natta node, Dungeon Tsukutte Jingai Musume to Honobono suru</Series>
   <Number>23</Number>
   <Count>1</Count>
   <Summary/>
   <Year>2018</Year>
   <Month>5</Month>
   <Writer>Ryuuyuu</Writer>
   <Penciller>Note Toono</Penciller>
   <Inker>Note Toono</Inker>
   <Colorist>Note Toono</Colorist>
   <Letterer>Note Toono</Letterer>
   <CoverArtist>Note Toono</CoverArtist>
   <Publisher>Dra-Dra-Dragon Age</Publisher>
   <Genre>Fantasy</Genre>
   <Web>https://myanimelist.net/manga/115200/Maou_ni_Natta_node_Dungeon_Tsukutte_Jingai_Musume_to_Honobono_suru</Web>
   <LanguageISO>en</LanguageISO>
   <Manga>Yes</Manga>
   <Notes>Scraped metadata from AniList and MyAnimeList (using Jikan API) on 2021-12-24 12:38 PM EST</Notes>
</ComicInfo>
"""
comicinfo_24 = """
<ComicInfo xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <!--Generated by Manga Tagger, an Endless Galaxy Studios project-->
   <Series>Maou ni Natta node, Dungeon Tsukutte Jingai Musume to Honobono suru</Series>
   <Number>24</Number>
   <Count>1</Count>
   <Summary/>
   <Year>2018</Year>
   <Month>5</Month>
   <Writer>Ryuuyuu</Writer>
   <Penciller>Note Toono</Penciller>
   <Inker>Note Toono</Inker>
   <Colorist>Note Toono</Colorist>
   <Letterer>Note Toono</Letterer>
   <CoverArtist>Note Toono</CoverArtist>
   <Publisher>Dra-Dra-Dragon Age</Publisher>
   <Genre>Fantasy</Genre>
   <Web>https://myanimelist.net/manga/115200/Maou_ni_Natta_node_Dungeon_Tsukutte_Jingai_Musume_to_Honobono_suru</Web>
   <LanguageISO>en</LanguageISO>
   <Manga>Yes</Manga>
   <Notes>Scraped metadata from AniList and MyAnimeList (using Jikan API) on 2021-12-24 12:38 PM EST</Notes>
</ComicInfo>
"""
path_23 = r"./Sample CBZ Chapter 23.cbz"
path_24 = r"./Sample CBZ Chapter 24.cbz"
sample_cover = r"F:\Anime_Series_Pelis\MANGA\tmp\SAMPLE_COVER.jpg"
test_path = path_23
test_path = test_path
sample_cover = sample_cover



initial_dir_count = 0

class TaggerCbzControllerTester(unittest.TestCase):
    def test_replace_file(self):
        """the number of files readed in the output cbz must be the same as in the input (check needed to not end up with empty unreadable files"""
        global initial_dir_count
        initial_dir_count = len(os.listdir(os.path.dirname(test_path)))

        root = tk.Tk()
        test_files = [path_23, path_24]
        opened_cbz = ReadComicInfo(path_23)
        number_files_preprocess = opened_cbz.total_files
        xml_preprocess = opened_cbz.to_ComicInfo()
        opened_cbz = 0 # reset so file gets closed
        random_int = random.random()
        app = MangataggerApp(root)

        app.create_loadedComicInfo_list(test_files)
        app.entry_2_title_var.set(f"This_title_var_is modified_{random_int}")

        app.parseUI_toComicInfo()
        app.saveComicInfo()  # This writes file

        opened_cbz = ReadComicInfo(path_23)
        number_files_postprocess = opened_cbz.total_files
        xml_preprocess = opened_cbz.to_ComicInfo()
        # self.assertAlmostEqual(number_files_preprocess, number_files_postprocess)
        print(f"Asserting {number_files_preprocess} vs {number_files_postprocess}, delta 1")
        self.assertAlmostEqual(number_files_preprocess, number_files_postprocess, delta=1)

    def test_zcount_leftover_files(self):

        final_dir_count = len(os.listdir(os.path.dirname(test_path)))
        print(f"Asserting {initial_dir_count} vs {final_dir_count}, delta 1")
        self.assertEqual(initial_dir_count, final_dir_count)



initial_dir_count = 0

class CoversCbzControllerTester(unittest.TestCase):
    def test_append(self):
        global initial_dir_count
        initial_dir_count = len(os.listdir(os.path.dirname(test_path)))

        with zipfile.ZipFile(test_path, 'r') as zin:
            item_count = len(zin.namelist())
            # print("\n".join(zin.namelist()))
        values_to_process = cover_process_item_info(
            cbz_file=test_path,
            cover_path=sample_cover,
            cover_format="jpg"

        )
        SetCover(values_to_process)

        with zipfile.ZipFile(test_path, 'r') as zin:
            item_count2 = len(zin.namelist())
            # print("\n\n\nNEW RESULT\n ")
            # print("\n".join(zin.namelist()))

        # if item_count == item_count2:
        #     print(f"####\n{item_count}\nSAME CONTENT\n{item_count2}\n####")
        print(f"Asserting {item_count} vs {item_count2}, delta 1")
        self.assertAlmostEqual(item_count, item_count2, delta=1)  # add assertion here

    def test_overwrite(self):
        with zipfile.ZipFile(test_path, 'r') as zin:
            item_count = len(zin.namelist())
            # print("\n".join(zin.namelist()))
        values_to_process = cover_process_item_info(
            cbz_file=test_path,
            cover_path=sample_cover,
            cover_format="jpg",
            coverOverwrite=True

        )
        SetCover(values_to_process)

        with zipfile.ZipFile(test_path, 'r') as zin:
            item_count2 = len(zin.namelist())
            # print("\n\n\nNEW RESULT\n ")
            # print("\n".join(zin.namelist()))

        # if item_count == item_count2:
        #     print(f"####\n{item_count}\nSAME CONTENT\n{item_count2}\n####")
        print(f"Asserting {item_count} vs {item_count2}, delta 1")
        self.assertAlmostEqual(item_count, item_count2, delta=1)  # add assertion here

    def test_delete(self):
        with zipfile.ZipFile(test_path, 'r') as zin:
            item_count = len(zin.namelist())
            # print("\n".join(zin.namelist()))
        values_to_process = cover_process_item_info(
            cbz_file=test_path,
            cover_path=sample_cover,
            cover_format="jpg",
            coverDelete=True


        )
        SetCover(values_to_process)

        with zipfile.ZipFile(test_path, 'r') as zin:
            item_count2 = len(zin.namelist())
            # print("\n\n\nNEW RESULT\n ")
            # print("\n".join(zin.namelist()))

        # if item_count == item_count2:
        #     print(f"####\n{item_count}\nSAME CONTENT\n{item_count2}\n####")
        print(f"Asserting {item_count} vs {item_count2}, delta 1")
        self.assertAlmostEqual(item_count, item_count2, delta=1)  # add assertion here

    def test_zcount_leftover_files(self):
        final_dir_count = len(os.listdir(os.path.dirname(test_path)))
        print(f"Asserting {initial_dir_count} vs {final_dir_count}, delta 1")
        self.assertEqual(initial_dir_count,final_dir_count)

if __name__ == '__main__':
    unittest.main()
