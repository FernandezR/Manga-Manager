import unittest

from MangaTaggerLib.cbz_handler import ReadComicInfo
import random
from MangaTaggerLib.MangaTagger import MangataggerApp

from SetCoverLib.cbz_handler import SetCover
from SetCoverLib.models import cover_process_item_info

import tkinter as tk
comicinfo_23 = """
<ComicInfo xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <!--Generated by Manga Tagger, an Endless Galaxy Studios project-->
   <Series>Maou ni Natta node, Dungeon Tsukutte Jingai Musume to Honobono suru</Series>
   <Number>23</Number>
   <Count>1</Count>
   <Summary/>
   <Year>2018</Year>
   <Month>5</Month>
   <Writer>Ryuuyuu</Writer>
   <Penciller>Note Toono</Penciller>
   <Inker>Note Toono</Inker>
   <Colorist>Note Toono</Colorist>
   <Letterer>Note Toono</Letterer>
   <CoverArtist>Note Toono</CoverArtist>
   <Publisher>Dra-Dra-Dragon Age</Publisher>
   <Genre>Fantasy</Genre>
   <Web>https://myanimelist.net/manga/115200/Maou_ni_Natta_node_Dungeon_Tsukutte_Jingai_Musume_to_Honobono_suru</Web>
   <LanguageISO>en</LanguageISO>
   <Manga>Yes</Manga>
   <Notes>Scraped metadata from AniList and MyAnimeList (using Jikan API) on 2021-12-24 12:38 PM EST</Notes>
</ComicInfo>
"""

comicinfo_24 = """
<ComicInfo xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <!--Generated by Manga Tagger, an Endless Galaxy Studios project-->
   <Series>Maou ni Natta node, Dungeon Tsukutte Jingai Musume to Honobono suru</Series>
   <Number>24</Number>
   <Count>1</Count>
   <Summary/>
   <Year>2018</Year>
   <Month>5</Month>
   <Writer>Ryuuyuu</Writer>
   <Penciller>Note Toono</Penciller>
   <Inker>Note Toono</Inker>
   <Colorist>Note Toono</Colorist>
   <Letterer>Note Toono</Letterer>
   <CoverArtist>Note Toono</CoverArtist>
   <Publisher>Dra-Dra-Dragon Age</Publisher>
   <Genre>Fantasy</Genre>
   <Web>https://myanimelist.net/manga/115200/Maou_ni_Natta_node_Dungeon_Tsukutte_Jingai_Musume_to_Honobono_suru</Web>
   <LanguageISO>en</LanguageISO>
   <Manga>Yes</Manga>
   <Notes>Scraped metadata from AniList and MyAnimeList (using Jikan API) on 2021-12-24 12:38 PM EST</Notes>
</ComicInfo>
"""
path_23 = r"I:\Mi unidad\Programacion\Python\ASCRIPT_MANGA_ZIPPER\tests\Sample CBZ Chapter 23.cbz"
path_24 = r"I:\Mi unidad\Programacion\Python\ASCRIPT_MANGA_ZIPPER\tests\Sample CBZ Chapter 24.cbz"



class Test_CompleteFunctionality(unittest.TestCase):

    def test_replace_file(self):
        """the number of files readed in the output cbz must be the same as in the input (check needed to not end up with empty unreadable files"""
        root = tk.Tk()
        test_files = [path_23,path_24]
        opened_cbz = ReadComicInfo(path_23)
        number_files_preprocess = opened_cbz.total_files
        xml_preprocess = opened_cbz.to_ComicInfo()
        opened_cbz = 0 # reset so file gets closed
        random_int = random.random()
        app = MangataggerApp(root)

        app.create_loadedComicInfo_list(test_files)
        app.entry_2_title_var.set(f"This_title_var_is modified_{random_int}")

        app.parseUI_toComicInfo()
        app.saveComicInfo()  # This writes file

        opened_cbz = ReadComicInfo(path_23)
        number_files_postprocess = opened_cbz.total_files
        xml_preprocess = opened_cbz.to_ComicInfo()
        # self.assertAlmostEqual(number_files_preprocess, number_files_postprocess)
        self.assertAlmostEqual(number_files_preprocess, number_files_postprocess, delta=1)

    def test_conflicting_ages(self):
        """the number of files readed in the output cbz must be the same as in the input (check needed to not end up with empty unreadable files"""
        root = tk.Tk()
        test_files = [path_23, path_24]

        opened_cbz = ReadComicInfo(path_23)
        number_files_preprocess = opened_cbz.total_files
        xml_preprocess = opened_cbz.to_ComicInfo()
        opened_cbz = 0  # reset so file gets closed
        random_int = random.random()
        app = MangataggerApp(root)
        app.create_loadedComicInfo_list(test_files)
        # random_int_year = random.randint(1, 5655)
        # app.spinbox_4_chapter_var.set(random_int_year)

        app.parseUI_toComicInfo()
        print("##### ASSERTION HERE #####")
        number_values = []
        for loadedInf in app.loadedComicInfo_list:
            print(loadedInf)
            print(loadedInf.path)
            print(loadedInf.comicInfoObj.get_Number())
            number_values.append(loadedInf.comicInfoObj.get_Number())
        self.assertNotEqual(number_values[0],number_values[1])

        # app.saveComicInfo()  # This writes file

        # opened_cbz = ReadComicInfo(path_23)
        # number_files_postprocess = opened_cbz.total_files
        # xml_preprocess = opened_cbz.to_ComicInfo()
        # # self.assertAlmostEqual(number_files_preprocess, number_files_postprocess)
        # self.assertAlmostEqual(number_files_preprocess, number_files_postprocess, delta=1)

    def test_cbz_handling(self):
        path_23 = r"I:\Mi unidad\Programacion\Python\ASCRIPT_MANGA_ZIPPER\tests\Sample CBZ Chapter 23.cbz"
        path_24 = r"I:\Mi unidad\Programacion\Python\ASCRIPT_MANGA_ZIPPER\tests\Sample CBZ Chapter 24.cbz"
        test_path = path_23
        with zipfile.ZipFile(test_path, 'r') as zin:
            item_count = len(zin.namelist())

        values_to_process = cover_process_item_info(cbz_file=test_path)
        SetCover(values_to_process).append()

        with zipfile.ZipFile(test_path, 'r') as zin:
            item_count2 = len(zin.namelist())

        self.assertEqual(item_count,item_count2)




if __name__ == "__main__":
    unittest.main()
